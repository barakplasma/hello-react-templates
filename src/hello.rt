<section>

    1.
    <h2>ShaiK likes to over-react</h2>

    2.
    <p>Create a "React Templates" project that displays a form having a text input field,
        and displays the message "name makes ShaiK over-react" , where name is the value provided in
        the input field.</p>
    <label for="nameInput">Who:
        <input type="text"
               id="nameInput"
               name="nameInput"
               onChange="{(ev)=>this.getName(ev)}" />
    </label>
    <h2 id="nameOutput">{this.state.name} makes ShaiK over-react.</h2>

    3. <p>Enhance the previous project so that an initial value for the name field can be
    provided via the URL.</p>

    4.
    <p> Create a panel that has two numeric input fields: lat and long.

        The panel should also display the text: "ShaiK is over-reacting at (long,lat)", where long
        and lat are the values provided in the form.

        This needs to be implemented in such a way that both long and lat are properties of a
        location object in the component state, and by creating a “linkState” function that
        creates a "two-way-data-binding" like React LinkState used to.</p>

    <div style="border: 2px solid black; width: 100%;">
        <div><label for="">lat <input name="lat"
                                      id="lat"
                                      type="text"
                                      onChange="{(ev)=>this.changeLocation(ev,'lat')}"></label>
        </div>
        <div><label for="">long<input name="long"
                                      id="long"
                                      type="text"
                                      onChange="{(ev)=>this.changeLocation(ev,'long')}"></label>
        </div>
        <div>ShaiK is over-reacting at (long: {this.state.location.long} , lat:
            {this.state.location.lat})
        </div>
    </div>

    5.

    <p>Create a panel that contains a form. Adding fields to the form should not require changing
        code in the panel (i.e., you can add fields dynamically in the rendered template). The value
        of the form fields should be output to the Dev Console whenever that field value changes
        (just that field, not all the fields every time.)</p>
    <div>
        <button onClick="{()=>this.changeInputs(+1)}"> +</button>
        <button onClick="{()=>this.changeInputs(-1)}"> -</button>
        <ul>
            <li key="{_.uniqueId()}"
                rt-repeat="input in this.state.inputs"><input type="text"
                                                              onChange="{(ev)=>this.printYourself(ev)}" />
            </li>
        </ul>
    </div>

    6.
    <p>Create a panel for selecting "country" and "city", where the available "cities" are
        dependent on the "selected" country. (Country/city information can be hard-coded). Initially
        the
        country is not specified, and the city list is empty. A Submit button must only be enabled
        when
        both country and city are selected, and disabled otherwise.</p>

    <form action="">
        <label for="country">Country </label>
        <select name="country"
                id="country"
                onChange="{(ev)=>this.changeCountry(ev)}">
            <option rt-repeat="country in Object.keys(this.state.countryCity)">{country}</option>
        </select>

        <label for="city">city </label>
        <select name="city"
                id="city">
            <option rt-repeat="city in this.state.countryCity[this.state.currentCountry]">{city
                }</option>
        </select>
        <button type="submit">Submit</button>
    </form>

</section>